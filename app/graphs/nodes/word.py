from langchain_core.messages import AIMessage, HumanMessage
from langgraph.types import interrupt, Command

from app.graphs.states.supervisor import SupervisorState
from app.graphs.states.word import WordGameState
from app.graphs.agents.word import word_guessing_agent

def choose_word(state: WordGameState) -> WordGameState:
    """
    Node function for initializing the word guessing game in a LangGraph graph.
    Prompts the user to think of a word from a predefined list and sets up the game state.
    If the user chooses to exit, returns a Command to end the game. Otherwise, updates the state to indicate
    the game is in progress and appends relevant messages to the conversation history.

    Args:
        state (WordGameState): The current state of the word guessing game, including messages and status.

    Returns:
        WordGameState: The updated game state after prompting the user to select a word and initializing the game.
    """

    state["status"] = "AWAITING_WORD"
    state["messages"].append(AIMessage(content="Let's play a word guessing game! I will try to guess the word you are thinking of."))

    interrupt("Think of a word from this list: " + ", ".join(state["word_list"]) + ". I will try to guess it!")

    state["status"] = "ASKING_QUESTIONS"
    state["messages"].append(HumanMessage(content="I have selected a word from the list. You can start asking questions!"))

    return state

async def guessing_word(state: WordGameState, config) -> WordGameState:
    """
    Node in the LangGraph graph responsible for invoking the word guessing agent (react agent)
    to generate the next question or make a guess based on the current game state.

    Args:
        state (WordGameState): The current state of the word guessing game.
        config: Configuration parameters for the guessing agent.

    Returns:
        WordGameState: Returns the updated game state after the agent's question or guess.
    """
    response = await word_guessing_agent.ainvoke(
        state,
        config=config,
    )
    return response

def word_question_user(state: WordGameState) -> WordGameState:
    """
    Node that interrupts the flow to ask the generated question to the human user.
    The latest question generated by the agent is retrieved from the state and presented to the user.
    The user's answer should be collected and added to the state before proceeding.

    Args:
        state (WordGameState): The current state of the word guessing game.

    Returns:
        WordGameState: The state is returned unchanged after interrupting for user input.
    """
    if state["asked_questions"]:
        latest_question = state["asked_questions"][-1]["question"]
        response = interrupt(f"{latest_question} (yes/no)")
        state["messages"].append(HumanMessage(content=response))
        state["asked_questions"][-1]["answer"] = response.strip().lower()
    return state


def final_guess(state: WordGameState) -> WordGameState:
    """
    Node that interrupts the flow to present the agent's final guess to the human user and asks if the guess is correct.
    The user's answer is then used to update the state with whether the guess was correct.

    Args:
        state (WordGameState): The current state of the word guessing game.

    Returns:
        WordGameState: The updated game state after recording the correctness of the guess.
    """
    guess = state.get("final_guess", None)
    if guess:
        response = interrupt(f"My guess is: '{guess}'. Is this correct? (yes/no)")
        state["messages"].append(HumanMessage(content=response))
        state["is_guess_correct"] = response.strip().lower() == "yes"

    return state

def end_word_game(state: SupervisorState) -> Command:
    """
    Node function for ending the word guessing game.
    This function is called when the game is over, either because the AI has guessed the word or the user has chosen to exit.
    It appends a message to the conversation history indicating that the game has ended.

    Args:
        state (WordGameState): The current state of the word guessing game, including messages and status.

    Returns:
        WordGameState: The updated game state after appending the end game message.
    """
    state["word_game_status"] = "COMPLETED"
    state["total_word_games"] += 1
    is_guess_correct = state.get("is_guess_correct", None)
    if is_guess_correct:
        state["correct_words"] += 1
        
    state["messages"].append(AIMessage(content="The word guessing game has ended. Thank you for playing!"))
    return state